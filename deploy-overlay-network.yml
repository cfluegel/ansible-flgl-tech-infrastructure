---
- name: Install wireguard and create private-public keypair
  hosts: overlaynetwork
  remote_user: root
  gather_facts: no

  # vars_files:
  #   - "secrets/{{ inventory_hostname }}.yml"

  tasks:
    - name: Install of packages
      ansible.builtin.apt:
        state: latest
        pkg:
          - wireguard
          - wireguard-dkms
          - wireguard-tools
      tags:
        - installation
        - packages

    - name: Check if Wireguard directory exists
      ansible.builtin.stat:
        path: /etc/wireguard
      register: check_wg_confdir
      tags:
        - check
        - configuartion

    - name: Create Wireguard Conf directory if it does not exists
      ansible.builtin.file:
        state: directory
        owner: root
        group: root
        mode: '0700'
        path: /etc/wireguard
      when: check_wg_confdir.stat.exists != True
      tags:
        - check
        - configuartion

    - name: Remove private and publickey, when we shall start from scratch
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      loop:
        - /etc/wireguard/{{ overlaynetworkname }}_privatekey
        - /etc/wireguard/{{ overlaynetworkname }}_publickey
      when:
        - overlaynetwork_recreate_force
      tags:
        - keycreation
        - configuartion

    - name: Check if the Wireguard Private Key for the overlay network exists
      ansible.builtin.stat:
        path: /etc/wireguard/{{ overlaynetworkname }}_privatekey
      register: check_wg_privatekey
      tags:
        - keycreation
        - configuartion

    - name: Check if the Wireguard Public Key for the overlay network exists
      ansible.builtin.stat:
        path: /etc/wireguard/{{ overlaynetworkname }}_publickey
      register: check_wg_publickey

    - name: Create Wireguard Private Key
      ansible.builtin.shell:
        cmd: /usr/bin/wg genkey > /etc/wireguard/{{ overlaynetworkname }}_privatekey
      when:
        - check_wg_privatekey.stat.exists != True
      tags:
        - keycreation
        - configuartion

    - name: Create Wireguard Public Key
      ansible.builtin.shell:
        cmd: /usr/bin/wg pubkey < /etc/wireguard/{{ overlaynetworkname }}_privatekey > /etc/wireguard/{{ overlaynetworkname }}_publickey
      when:
        - check_wg_publickey.stat.exists != True
      tags:
        - keycreation
        - configuartion

    - name: Change Filepermission of both files
      ansible.builtin.file:
        mode: '0600'
        path: '{{ item }}'
        state: file
      loop:
        - /etc/wireguard/{{ overlaynetworkname }}_privatekey
        - /etc/wireguard/{{ overlaynetworkname }}_publickey
      tags:
        - keycreation
        - configuartion

- name: Gather additional facts about each host
  hosts: overlaynetwork
  remote_user: root

  tasks:
    - name: Read and register public wireguard key
      ansible.builtin.shell: cat /etc/wireguard/{{ overlaynetworkname }}_publickey
      register: wg_public_key

    - name: Read and register public wireguard key
      ansible.builtin.shell: cat /etc/wireguard/{{ overlaynetworkname }}_privatekey
      register: wg_private_key

    - name: Output the public Wireguard Key of each host
      ansible.builtin.debug:
        var: wg_public_key.stdout

    - name: Output the private Wireguard Key of each host
      ansible.builtin.debug:
        var: wg_private_key.stdout


- name: Find out the internal network ids
  hosts: overlaynetwork
  remote_user: root

  tasks:
    - name: DNS Request to acquire the internal ip
      ansible.builtin.set_fact:
        overlay_network_ip: "{{ lookup('community.general.dig', inventory_hostname + '.' + overlaynetworkname + '.flgl.network.' , 'qtype=A') }} "
      tags:
        - dnslookup

    - name: Debug Output of the found ip
      ansible.builtin.debug:
        var: overlay_network_ip
      tags:
        - dnslookup

- name: Create configuration file and activate
  hosts: overlaynetwork
  remote_user: root
  gather_facts: no

  tasks:
    - name: Generate wg0.conf
      ansible.builtin.template:
        src: overlay-network/wg0.conf.j2
        dest: /etc/wireguard/wg0.conf
        owner: root
        group: root
        mode: '0600'
      when: inventory_hostname in groups['overlaynetwork']
      register: check_wg_wg0config
      tags:
        - generateConfig

    - name: Remove wg0.conf if host is not in overlaynetwork group
      ansible.builtin.file:
        state: absent
        path: /etc/wireguard/wg0.conf
      when: inventory_hostname not in groups['overlaynetwork']
      tags:
        - generateConfig

    - name: Enable the wireguard quick service for wg0.conf
      ansible.builtin.service:
        enabled: yes
        state: started
        name: wg-quick@wg0
      tags:
        - configuration
        - startup
